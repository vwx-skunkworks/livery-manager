<?php
/**
 * This file was generated by Atlas. Changes will be overwritten.
 */
declare(strict_types=1);

namespace LiveryManager\DB\Phinxlog\_generated;

use Atlas\Mapper\Mapper;
use LiveryManager\DB\Phinxlog\PhinxlogRecord;
use LiveryManager\DB\Phinxlog\PhinxlogRecordSet;
use LiveryManager\DB\Phinxlog\PhinxlogRelated;
use LiveryManager\DB\Phinxlog\PhinxlogSelect;
use LiveryManager\DB\Phinxlog\PhinxlogTable;

/**
 * @method PhinxlogTable getTable()
 * @method ?PhinxlogRecord fetchRecord(mixed $primaryVal, array $loadRelated = [])
 * @method ?PhinxlogRecord fetchRecordBy(array $whereEquals, array $loadRelated = [])
 * @method PhinxlogRecord[] fetchRecords(array $primaryVals, array $loadRelated = [])
 * @method PhinxlogRecord[] fetchRecordsBy(array $whereEquals, array $loadRelated = [])
 * @method PhinxlogRecordSet fetchRecordSet(array $primaryVals, array $loadRelated = [])
 * @method PhinxlogRecordSet fetchRecordSetBy(array $whereEquals, array $loadRelated = [])
 * @method PhinxlogSelect select(array $whereEquals = [])
 * @method PhinxlogRecord newRecord(array $fields = [])
 * @method PhinxlogRecord[] newRecords(array $fieldSets)
 * @method PhinxlogRecordSet newRecordSet(PhinxlogRecord[] $records = [])
 * @method PhinxlogRecord turnRowIntoRecord(PhinxlogRow $row, array $loadRelated = [])
 * @method PhinxlogRecord[] turnRowsIntoRecords(PhinxlogRow[] $rows, array $loadRelated = [])
 */
abstract class Phinxlog_ extends Mapper
{
    public const RECORD_CLASS = PhinxlogRecord::CLASS;
    public const RECORD_SET_CLASS = PhinxlogRecordSet::CLASS;
    public const RELATED_CLASS = PhinxlogRelated::CLASS;
    public const SELECT_CLASS = PhinxlogSelect::CLASS;
}
