<?php
/**
 * This file was generated by Atlas. Changes will be overwritten.
 */
declare(strict_types=1);

namespace LiveryManager\DB\LiveryType\_generated;

use Atlas\Mapper\Mapper;
use LiveryManager\DB\LiveryType\LiveryTypeRecord;
use LiveryManager\DB\LiveryType\LiveryTypeRecordSet;
use LiveryManager\DB\LiveryType\LiveryTypeRelated;
use LiveryManager\DB\LiveryType\LiveryTypeSelect;
use LiveryManager\DB\LiveryType\LiveryTypeTable;

/**
 * @method LiveryTypeTable getTable()
 * @method ?LiveryTypeRecord fetchRecord(mixed $primaryVal, array $loadRelated = [])
 * @method ?LiveryTypeRecord fetchRecordBy(array $whereEquals, array $loadRelated = [])
 * @method LiveryTypeRecord[] fetchRecords(array $primaryVals, array $loadRelated = [])
 * @method LiveryTypeRecord[] fetchRecordsBy(array $whereEquals, array $loadRelated = [])
 * @method LiveryTypeRecordSet fetchRecordSet(array $primaryVals, array $loadRelated = [])
 * @method LiveryTypeRecordSet fetchRecordSetBy(array $whereEquals, array $loadRelated = [])
 * @method LiveryTypeSelect select(array $whereEquals = [])
 * @method LiveryTypeRecord newRecord(array $fields = [])
 * @method LiveryTypeRecord[] newRecords(array $fieldSets)
 * @method LiveryTypeRecordSet newRecordSet(LiveryTypeRecord[] $records = [])
 * @method LiveryTypeRecord turnRowIntoRecord(LiveryTypeRow $row, array $loadRelated = [])
 * @method LiveryTypeRecord[] turnRowsIntoRecords(LiveryTypeRow[] $rows, array $loadRelated = [])
 */
abstract class LiveryType_ extends Mapper
{
    public const RECORD_CLASS = LiveryTypeRecord::CLASS;
    public const RECORD_SET_CLASS = LiveryTypeRecordSet::CLASS;
    public const RELATED_CLASS = LiveryTypeRelated::CLASS;
    public const SELECT_CLASS = LiveryTypeSelect::CLASS;
}
